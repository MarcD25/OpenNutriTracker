// Mocks generated by Mockito 5.4.4 from annotations
// in opennutritracker/test/widget_test/features/diary/presentation/widgets/diary_table_calendar_checkin_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:opennutritracker/features/diary/presentation/bloc/diary_calendar_bloc.dart'
    as _i2;
import 'package:opennutritracker/features/weight_checkin/domain/entity/weight_entry_entity.dart'
    as _i5;
import 'package:opennutritracker/features/weight_checkin/domain/service/weight_checkin_calendar_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDiaryCalendarState_0 extends _i1.SmartFake
    implements _i2.DiaryCalendarState {
  _FakeDiaryCalendarState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeightCheckinCalendarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeightCheckinCalendarService extends _i1.Mock
    implements _i3.WeightCheckinCalendarService {
  MockWeightCheckinCalendarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isCheckinDay(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #isCheckinDay,
          [date],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<DateTime, bool>> getCheckinDaysForMonth(DateTime? month) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCheckinDaysForMonth,
          [month],
        ),
        returnValue: _i4.Future<Map<DateTime, bool>>.value(<DateTime, bool>{}),
      ) as _i4.Future<Map<DateTime, bool>>);

  @override
  _i4.Future<DateTime?> getNextCheckinDate() => (super.noSuchMethod(
        Invocation.method(
          #getNextCheckinDate,
          [],
        ),
        returnValue: _i4.Future<DateTime?>.value(),
      ) as _i4.Future<DateTime?>);

  @override
  _i4.Future<bool> isTodayCheckinDay() => (super.noSuchMethod(
        Invocation.method(
          #isTodayCheckinDay,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<DateTime>> getCheckinDaysInRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCheckinDaysInRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i4.Future<List<DateTime>>.value(<DateTime>[]),
      ) as _i4.Future<List<DateTime>>);

  @override
  _i4.Future<_i5.CheckinFrequency> getCheckinFrequency() => (super.noSuchMethod(
        Invocation.method(
          #getCheckinFrequency,
          [],
        ),
        returnValue:
            _i4.Future<_i5.CheckinFrequency>.value(_i5.CheckinFrequency.daily),
      ) as _i4.Future<_i5.CheckinFrequency>);

  @override
  _i4.Future<void> setCheckinFrequency(_i5.CheckinFrequency? frequency) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCheckinFrequency,
          [frequency],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DiaryCalendarBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiaryCalendarBloc extends _i1.Mock implements _i2.DiaryCalendarBloc {
  MockDiaryCalendarBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DiaryCalendarState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDiaryCalendarState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.DiaryCalendarState);

  @override
  _i4.Stream<_i2.DiaryCalendarState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.DiaryCalendarState>.empty(),
      ) as _i4.Stream<_i2.DiaryCalendarState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i2.DiaryCalendarEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.DiaryCalendarEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.DiaryCalendarState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i2.DiaryCalendarEvent>(
    _i6.EventHandler<E, _i2.DiaryCalendarState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i2.DiaryCalendarEvent, _i2.DiaryCalendarState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i6.Change<_i2.DiaryCalendarState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
