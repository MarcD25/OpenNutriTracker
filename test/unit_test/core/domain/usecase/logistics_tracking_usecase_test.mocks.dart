// Mocks generated by Mockito 5.4.4 from annotations
// in opennutritracker/test/unit_test/core/domain/usecase/logistics_tracking_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:logging/logging.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:opennutritracker/core/data/data_source/logistics_data_source.dart'
    as _i3;
import 'package:opennutritracker/core/data/dbo/logistics_event_dbo.dart' as _i6;
import 'package:opennutritracker/core/domain/entity/logistics_event_entity.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LogisticsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogisticsDataSource extends _i1.Mock
    implements _i3.LogisticsDataSource {
  MockLogisticsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);

  @override
  _i4.Future<void> logUserAction(_i5.LogisticsEventEntity? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #logUserAction,
          [event],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logChatInteraction(
    String? message,
    String? response,
    Duration? responseTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #logChatInteraction,
          [
            message,
            response,
            responseTime,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logNavigation(
    String? fromScreen,
    String? toScreen,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #logNavigation,
          [
            fromScreen,
            toScreen,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> rotateLogsIfNeeded() => (super.noSuchMethod(
        Invocation.method(
          #rotateLogsIfNeeded,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.LogisticsEventDBO>> getLogsByDateRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogsByDateRange,
          [
            start,
            end,
          ],
        ),
        returnValue: _i4.Future<List<_i6.LogisticsEventDBO>>.value(
            <_i6.LogisticsEventDBO>[]),
      ) as _i4.Future<List<_i6.LogisticsEventDBO>>);

  @override
  _i4.Future<List<_i6.LogisticsEventDBO>> getAllLogs() => (super.noSuchMethod(
        Invocation.method(
          #getAllLogs,
          [],
        ),
        returnValue: _i4.Future<List<_i6.LogisticsEventDBO>>.value(
            <_i6.LogisticsEventDBO>[]),
      ) as _i4.Future<List<_i6.LogisticsEventDBO>>);

  @override
  _i4.Future<List<_i6.LogisticsEventDBO>> getLogsByEventType(
          _i5.LogisticsEventType? eventType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogsByEventType,
          [eventType],
        ),
        returnValue: _i4.Future<List<_i6.LogisticsEventDBO>>.value(
            <_i6.LogisticsEventDBO>[]),
      ) as _i4.Future<List<_i6.LogisticsEventDBO>>);

  @override
  _i4.Future<int> getLogCount() => (super.noSuchMethod(
        Invocation.method(
          #getLogCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> clearAllLogs() => (super.noSuchMethod(
        Invocation.method(
          #clearAllLogs,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.LogisticsEventDBO>> getRecentLogs({int? limit = 100}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentLogs,
          [],
          {#limit: limit},
        ),
        returnValue: _i4.Future<List<_i6.LogisticsEventDBO>>.value(
            <_i6.LogisticsEventDBO>[]),
      ) as _i4.Future<List<_i6.LogisticsEventDBO>>);

  @override
  _i4.Future<void> flushPendingEvents() => (super.noSuchMethod(
        Invocation.method(
          #flushPendingEvents,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addSubscription(_i4.StreamSubscription<dynamic>? subscription) =>
      super.noSuchMethod(
        Invocation.method(
          #addSubscription,
          [subscription],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addTimer(_i4.Timer? timer) => super.noSuchMethod(
        Invocation.method(
          #addTimer,
          [timer],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cleanupMemory() => super.noSuchMethod(
        Invocation.method(
          #cleanupMemory,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
