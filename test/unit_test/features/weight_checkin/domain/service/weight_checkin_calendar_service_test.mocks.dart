// Mocks generated by Mockito 5.4.4 from annotations
// in opennutritracker/test/unit_test/features/weight_checkin/domain/service/weight_checkin_calendar_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:opennutritracker/features/weight_checkin/domain/entity/weight_entry_entity.dart'
    as _i5;
import 'package:opennutritracker/features/weight_checkin/domain/entity/weight_trend_entity.dart'
    as _i2;
import 'package:opennutritracker/features/weight_checkin/domain/usecase/weight_checkin_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeightTrend_0 extends _i1.SmartFake implements _i2.WeightTrend {
  _FakeWeightTrend_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeightCheckinUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeightCheckinUsecase extends _i1.Mock
    implements _i3.WeightCheckinUsecase {
  MockWeightCheckinUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> recordWeightEntry(
    double? weight, {
    String? notes,
    double? bodyFatPercentage,
    double? muscleMass,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordWeightEntry,
          [weight],
          {
            #notes: notes,
            #bodyFatPercentage: bodyFatPercentage,
            #muscleMass: muscleMass,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.WeightEntryEntity>> getWeightHistory(int? days) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeightHistory,
          [days],
        ),
        returnValue: _i4.Future<List<_i5.WeightEntryEntity>>.value(
            <_i5.WeightEntryEntity>[]),
      ) as _i4.Future<List<_i5.WeightEntryEntity>>);

  @override
  _i4.Future<List<_i5.WeightEntryEntity>> getAllWeightHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllWeightHistory,
          [],
        ),
        returnValue: _i4.Future<List<_i5.WeightEntryEntity>>.value(
            <_i5.WeightEntryEntity>[]),
      ) as _i4.Future<List<_i5.WeightEntryEntity>>);

  @override
  _i4.Future<_i5.WeightEntryEntity?> getLatestWeightEntry() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatestWeightEntry,
          [],
        ),
        returnValue: _i4.Future<_i5.WeightEntryEntity?>.value(),
      ) as _i4.Future<_i5.WeightEntryEntity?>);

  @override
  _i4.Future<_i2.WeightTrend> calculateWeightTrend(int? days) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateWeightTrend,
          [days],
        ),
        returnValue: _i4.Future<_i2.WeightTrend>.value(_FakeWeightTrend_0(
          this,
          Invocation.method(
            #calculateWeightTrend,
            [days],
          ),
        )),
      ) as _i4.Future<_i2.WeightTrend>);

  @override
  _i4.Future<bool> shouldShowCheckinReminder() => (super.noSuchMethod(
        Invocation.method(
          #shouldShowCheckinReminder,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setCheckinFrequency(_i5.CheckinFrequency? frequency) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCheckinFrequency,
          [frequency],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> initializeNotifications() => (super.noSuchMethod(
        Invocation.method(
          #initializeNotifications,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> requestNotificationPermissions() => (super.noSuchMethod(
        Invocation.method(
          #requestNotificationPermissions,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i5.CheckinFrequency> getCheckinFrequency() => (super.noSuchMethod(
        Invocation.method(
          #getCheckinFrequency,
          [],
        ),
        returnValue:
            _i4.Future<_i5.CheckinFrequency>.value(_i5.CheckinFrequency.daily),
      ) as _i4.Future<_i5.CheckinFrequency>);

  @override
  _i4.Future<DateTime?> getNextCheckinDate() => (super.noSuchMethod(
        Invocation.method(
          #getNextCheckinDate,
          [],
        ),
        returnValue: _i4.Future<DateTime?>.value(),
      ) as _i4.Future<DateTime?>);

  @override
  _i4.Future<void> deleteWeightEntry(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteWeightEntry,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool isValidWeight(
    double? weight, {
    bool? isKilograms = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isValidWeight,
          [weight],
          {#isKilograms: isKilograms},
        ),
        returnValue: false,
      ) as bool);

  @override
  double convertWeight(
    double? weight, {
    required bool? fromKgToLbs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertWeight,
          [weight],
          {#fromKgToLbs: fromKgToLbs},
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double calculateBMI(
    double? weightKG,
    double? heightCM,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateBMI,
          [
            weightKG,
            heightCM,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i3.BMICategory getBMICategory(double? bmi) => (super.noSuchMethod(
        Invocation.method(
          #getBMICategory,
          [bmi],
        ),
        returnValue: _i3.BMICategory.underweight,
      ) as _i3.BMICategory);

  @override
  String getCacheStats() => (super.noSuchMethod(
        Invocation.method(
          #getCacheStats,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getCacheStats,
            [],
          ),
        ),
      ) as String);
}
